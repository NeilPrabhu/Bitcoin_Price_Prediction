{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Twitter API Calls","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"4WuiK-1BQCAP","cellView":"form"},"outputs":[],"source":["#@title\n","# working syntax/search for last seven days of tweets\n","\n","!pip install requests\n","import requests\n","import json\n","\n","BEARER_TOKEN = \"AAAAAAAAAAAAAAAAAAAAANkceAEAAAAAQqvCQuzusUFgZaEsB4S0zlIalvw%3DVkWOoDdeS8Flc5qu6bsUGEGJDreWG3oyzI3LGHz3D22p5BKkuw\"\n","#define search twitter function\n","\n","def search_twitter(query, tweet_fields, bearer_token = BEARER_TOKEN):\n","    headers = {\"Authorization\": \"Bearer {}\".format(bearer_token)}\n","\n","    url = \"https://api.twitter.com/2/tweets/search/recent?query={}&{}\".format(\n","        query, tweet_fields\n","    )\n","    response = requests.request(\"GET\", url, headers=headers)\n","\n","    print(response.status_code)\n","\n","    if response.status_code != 200:\n","        raise Exception(response.status_code, response.text)\n","    return response.json()\n","\n","\n","#search term\n","query = \"skateboarding dog!\"\n","#twitter fields to be returned by api call\n","tweet_fields = \"tweet.fields=text,author_id,created_at\"\n","\n","#twitter api call\n","json_response = search_twitter(query=query, tweet_fields=tweet_fields, bearer_token=BEARER_TOKEN)\n","#pretty printing\n","print(json.dumps(json_response, indent=4, sort_keys=True))"]},{"cell_type":"code","source":["#@title\n","# working syntax/search for count of tweets\n","\n","!pip install requests\n","import requests\n","import json\n","\n","BEARER_TOKEN = \"AAAAAAAAAAAAAAAAAAAAANkceAEAAAAAQqvCQuzusUFgZaEsB4S0zlIalvw%3DVkWOoDdeS8Flc5qu6bsUGEGJDreWG3oyzI3LGHz3D22p5BKkuw\"\n","#define search twitter function\n","\n","def search_twitter(query, bearer_token = BEARER_TOKEN):\n","    headers = {\"Authorization\": \"Bearer {}\".format(bearer_token)}\n","\n","    # adjust start time and end time in URL\n","    url = \"https://api.twitter.com/2/tweets/counts/all?query={}&start_time={}&end_time={}&granularity={}&\".format(\n","        query, start_time, end_time, gran\n","    )\n","    response = requests.request(\"GET\", url, headers=headers)\n","\n","    print(response.status_code)\n","\n","    if response.status_code != 200:\n","        raise Exception(response.status_code, response.text)\n","    return response.json()\n","\n","\n","#search term\n","query = \"bitcoin OR btc -is:retweet\"\n","start_time = '2020-08-01T00:00:00Z'\n","end_time = '2020-10-01T00:00:00Z'\n","gran = 'day'\n","#twitter fields to be returned by api call\n","\n","#twitter api call\n","json_response = search_twitter(query=query, bearer_token=BEARER_TOKEN)\n","#pretty printing\n","print(json.dumps(json_response, indent=4, sort_keys=True))"],"metadata":{"id":"cWl-VIoeQNZg","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title\n","#export tweet count data\n","\n","import pandas as pd\n","from google.colab import drive\n","\n","df = pd.DataFrame(json_response['data'])\n","df.to_csv('json_response.csv')\n","\n","\n","drive.mount('/content/drive', force_remount=True)\n","path = '/content/drive/My Drive/json_response.csv'\n","\n","with open(path, 'w', encoding = 'utf-8-sig') as f:\n","  df.to_csv(f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":232},"id":"uBHc6zC5kJpk","executionInfo":{"status":"error","timestamp":1657692807035,"user_tz":420,"elapsed":534,"user":{"displayName":"Oleg Ananyev","userId":"09260112401501306717"}},"outputId":"0c23f1e4-1004-4a56-d107-53c8856a7746","cellView":"form"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-6daea6e67305>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson_response\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'json_response.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'json_response' is not defined"]}]},{"cell_type":"code","source":["# working syntax/search for a specific period of time\n","\n","!pip install requests\n","import requests\n","import json\n","\n","#authentication token\n","BEARER_TOKEN = \"AAAAAAAAAAAAAAAAAAAAANkceAEAAAAAQqvCQuzusUFgZaEsB4S0zlIalvw%3DVkWOoDdeS8Flc5qu6bsUGEGJDreWG3oyzI3LGHz3D22p5BKkuw\"\n","\n","#define search twitter function\n","def search_twitter(query, tweet_fields, bearer_token = BEARER_TOKEN):\n","    headers = {\"Authorization\": \"Bearer {}\".format(bearer_token)}\n","\n","    # adjust start time and end time in URL\n","    url = \"https://api.twitter.com/2/tweets/search/all?query={}&tweet.fields={}&start_time={}&end_time={}&max_results=500\".format(\n","        query, tweet_fields, start_time, end_time\n","    )\n","    response = requests.request(\"GET\", url, headers=headers)\n","\n","    print(response.status_code)\n","\n","    if response.status_code != 200:\n","        raise Exception(response.status_code, response.text)\n","    return response.json()\n","\n","#search term\n","query = \"bitcoin OR btc -is:retweet\"\n","\n","#twitter fields to be returned by api call\n","tweet_fields = \"text,author_id,created_at,lang\"\n","start_time = '2021-01-01T00:00:00Z'\n","end_time = '2021-02-01T00:00:00Z'\n","\n","\n","#other tweet fields - attachments,entities,in_reply_to_user_id,geo,public_metrics\n","#https://api.twitter.com/2/tweets/sample/stream?tweet.fields=created_at&expansions=author_id&user.fields=created_at\n","#&max_results=50\n","\n","#twitter api call\n","json_response = search_twitter(query=query, tweet_fields=tweet_fields, bearer_token=BEARER_TOKEN)\n","#pretty printing\n","print(json.dumps(json_response, indent=4, sort_keys=True))"],"metadata":{"id":"1LD5FcfdQT31","executionInfo":{"status":"error","timestamp":1657693055183,"user_tz":420,"elapsed":4515,"user":{"displayName":"Oleg Ananyev","userId":"09260112401501306717"}},"outputId":"66fadc59-f731-4c82-fd8b-7253a442126a","colab":{"base_uri":"https://localhost:8080/","height":487}},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (2.23.0)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests) (2022.6.15)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests) (1.24.3)\n","400\n"]},{"output_type":"error","ename":"Exception","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-be1d2b6c9520>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;31m#twitter api call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m \u001b[0mjson_response\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msearch_twitter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtweet_fields\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtweet_fields\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbearer_token\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mBEARER_TOKEN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;31m#pretty printing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson_response\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msort_keys\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-7-be1d2b6c9520>\u001b[0m in \u001b[0;36msearch_twitter\u001b[0;34m(query, tweet_fields, bearer_token)\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus_code\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m200\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus_code\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mException\u001b[0m: (400, '{\"errors\":[{\"parameters\":{\"max_results\":[\"1000\"]},\"message\":\"The `max_results` query parameter value [1000] is not between 10 and 500\"}],\"title\":\"Invalid Request\",\"detail\":\"One or more parameters to your request was invalid.\",\"type\":\"https://api.twitter.com/2/problems/invalid-request\"}')"]}]},{"cell_type":"code","source":["# export tweet data\n","\n","import pandas as pd\n","from google.colab import drive\n","\n","df = pd.DataFrame(json_response['data'])\n","df.to_csv('tweets_sample.csv')\n","\n","\n","drive.mount('/content/drive', force_remount=True)\n","path = '/content/drive/My Drive/Twitter Data/2020_09_tweets_sample.csv'\n","\n","with open(path, 'w', encoding = 'utf-8-sig') as f:\n","  df.to_csv(f)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5JF0iXJVZA7U","executionInfo":{"status":"ok","timestamp":1657174254519,"user_tz":420,"elapsed":18473,"user":{"displayName":"Oleg Ananyev","userId":"09260112401501306717"}},"outputId":"ee3e98a8-ea25-4acd-c487-7c3c542da52f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["print(df[0:5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VvPyga5J4-v9","executionInfo":{"status":"ok","timestamp":1656966849464,"user_tz":420,"elapsed":302,"user":{"displayName":"Oleg Ananyev","userId":"09260112401501306717"}},"outputId":"85f712a5-81a0-460b-80a9-b2c092516323"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                                text                   id  \\\n","0  RT @jack: #Bitcoin (aka “crypto”) is direct ac...  1311455781158518787   \n","1  @idiot_salad You do realize there are #BTC lev...  1311455775508832256   \n","2  DogDefiCoin Airdrop is now Live🚀💰🏆\\n\\nClick on...  1311455759750832128   \n","3  DogDefiCoin Airdrop is now Live🚀💰🏆\\n\\nClick on...  1311455752440164354   \n","4  Spike in new participants buying Bitcoin is ‘o...  1311455751773327364   \n","\n","             author_id lang                created_at  \n","0   976495073205673984   en  2020-09-30T23:59:58.000Z  \n","1  1174042649650745347   en  2020-09-30T23:59:57.000Z  \n","2  1246199004297342976   en  2020-09-30T23:59:53.000Z  \n","3  1090288915691511808   en  2020-09-30T23:59:51.000Z  \n","4  1117550458493706240   en  2020-09-30T23:59:51.000Z  \n"]}]}]}